// Testing Data

// DATASET COLLECTION
db.DATASETS.insertMany([
  { dataset_id: 1, timestamp: [1, 2, 3, 4, 5], heart_rate: [40, 42, 41, 48, 47], sweat: [5, 6, 7, 6, 6], machine_id: 842},
  { dataset_id: 2, timestamp: [32, 33, 34, 35, 36], heart_rate: [50, 52, 51, 58, 57], sweat: [10, 11, 12, 11, 11], machine_id: 842},
  { dataset_id: 3, timestamp: [27, 28, 29, 30, 31], heart_rate: [90, 91, 91, 92, 90], sweat: [4, 5, 6, 6, 5], machine_id: 843}
]);

//Test Queries for Data

//T1.1 Adding an incorrect id
db.DATASETS.insertOne({dataset_id: te, timestamp: [23, 34, 37, 40], heart_rate: [34, 67, 64, 78], sweat: [5,2,6,3], machine_id:453});

//T1.2 Adding an incorrect timestamp
db.DATASETS.insertOne({dataset_id: 4, timestamp: [23, 34, te, 37, 40], heart_rate: [34, 67, 64, 78], sweat: [5,2,6,3], machine_id:453});

//T1.3 Adding an incorrect heart rate
db.DATASETS.insertOne({dataset_id: 4, timestamp: [23, 34, 37, 40], heart_rate: [34, 67, te, 64, 78], sweat: [5,2,6,3], machine_id:453});

//T1.4 Adding an incorrect sweat
db.DATASETS.insertOne({dataset_id: 4, timestamp: [23, 34, 37, 40], heart_rate: [34, 67, 64, 78], sweat: [5,2, te,6,3], machine_id:453});

//T1.5 Adding an incorrect machine id
db.DATASETS.insertOne({dataset_id: 4, timestamp: [23, 34, 37, 40], heart_rate: [34, 67, 64, 78], sweat: [5,2,6,3], machine_id:te});

//T2.1 Deleting one entry
db.DATASETS.deleteOne({dataset_id: 2})

//T2.2 Deleting multiple entry
db.DATASETS.deleteMany({category: "machine_id"})

//T3.1 Update one entry "Dataset_id"
db.DATASETS.updateOne({dataset_id: 1}, {$set:{dataset_id: 1}})

//T3.2 Update one entry "Timestamp"
db.DATASETS.updateOne({dataset_id: 1}, {$set:{timestamp: [23,53,63,21]}})

//T3.3 Update one entry "Heart Rate"
db.DATASETS.updateOne({dataset_id: 1}, {$set:{heart_rate: [23,74,35,73]}})

//T3.4 Update one entry "Sweat"
db.DATASETS.updateOne({dataset_id: 1}, {$set:{sweat: [2,6,9,3]}})

//T3.5 Update one entry "Machine ID"
db.DATASETS.updateOne({dataset_id: 1}, {$set:{machine_id:4}})

//T3.6 Update maltiple entry
db.DATASETS.updateMany({}, {$inc:{dataset_id:1}})

//T4 Insert data if can not be found on search
db.DATESETS.updateOne(
  { dataset_id: 4 },
  {
    $set:
      {
        dataset_id: 4,
		timestamp: [23, 34, 37, 40],
		heart_rate: [34, 67, 64, 78],
		sweat: [5, 2, 6, 3],
		machine_id: 844
      }
  },
  { upsert: true }
)

//T5.1 Find all the timestamp values
db.DATASETS.find({}, { _id: 0, timestamp: 1 })

//T5.2 Find all the heart rate values
db.DATASETS.find({}, { _id: 0, heart_rate: 1 })

//T5.3 Find all the sweat values
db.DATASETS.find({}, { _id: 0, sweat: 1 })


//Test Queries for Users

// USERS COLLECTION
db.USERS.insertMany([
  { "user_id": 1, "name": "conor", "email": "conor@dkit.ie", "password": "qweQWE123", "profile_picture": "conor/picture/profile_picture"},
  { "user_id": 2, "name": "kevin", "email": "kevin@dkit.ie", "password": "qweQWE123", "profile_picture": "kevin/picture/profile_picture"},
    { "user_id": 3, "name": "kacper", "email": "kacper@dkit.ie", "password": "qweQWE123", "profile_picutre": "kacper/picture/profile_picture"}
]);

//Test Queries for Data

//T1.1 Adding an incorrect User ID
db.USERS.insertOne({"user_id": te, "name": "conor", "email": "conor@dkit.ie", "password": "qweQWE123", "profile_picture": "conor/picture/profile_picture"}),

//T1.2 Adding an incorrect timestamp
db.USERS.insertOne({"user_id": te, "name": conor, "email": "conor@dkit.ie", "password": "qweQWE123", "profile_picture": "conor/picture/profile_picture"}),

//T1.3 Adding an incorrect email data
db.USERS.insertOne({"user_id": te, "name": "conor", "email": conor@dkit.ie, "password": "qweQWE123", "profile_picture": "conor/picture/profile_picture"}),

//T1.4 Adding an incorrect password data
db.USERS.insertOne({"user_id": te, "name": "conor", "email": "conor@dkit.ie", "password": qweQWE123, "profile_picture": "conor/picture/profile_picture"}),

//T2.1 Deleting one entry
db.USERS.deleteOne({user_id: 2})

//T2.2 Deleting multiple entry
db.USERS.deleteMany({category: "machine_id"})

//T3.1 Update one entry "user_id"
db.USERS.updateOne({user_id: 1}, {$set:{user_id: 5}})

//T3.2 Update one entry "name"
db.USERS.updateOne({user_id: 1}, {$set:{"name": "kevin"}})

//T3.3 Update one entry "email"
db.USERS.updateOne({user_id: 1}, {$set:{"email": "conor@gmail.com"}})

//T3.4 Update one entry "password"
db.USERS.updateOne({user_id: 1}, {$set:{"password": "QWEqwe123"}})

//T3.5 Update one entry "profile_picture"
db.USERS.updateOne({user_id: 1}, {$set:{"profile_picture": "conor/picture/profile_picture"}})

//T3.6 Update maltiple entry
db.USERS.updateMany({}, {$inc:{user_id:1}})

//T4 Insert data if can not be found on search
db.USERS.updateOne(
  { user_id: 4 },
  {
    $set:
      {
        user_id: 4,
		name: "kacper",
		email: "kacper@email.com",
		password: "QWEqwe123",
		profile_picture : "kacper/picture/profile_picture"
      }
  },
  { upsert: true }
)

//T5.1 Find all the user_id values
db.USERS.find({}, { _id: 0, user_id: 1 })

//T5.2 Find all the name values
db.USERS.find({}, { _id: 0, name: 1 })

//T5.3 Find all the email values
db.USERS.find({}, { _id: 0, email: 1 })

//T5.4 Find all the password values
db.USERS.find({}, { _id: 0, password: 1 })

// REVIEWS COLLECTION
db.REVIEWS.insertMany([
    { "review_id": 282, "description": "movie review 1 description", "date": "1/1/2022", "user_id": 1, "dataset_id": 1, "movie_id": 10},
    { "review_id": 283, "description": "movie review 2 description", "date": "1/1/2022", "user_id": 2, "dataset_id": 2, "movie_id": 11},
    { "review_id": 284, "description": "movie review 3 description", "date": "1/1/2022", "user_id": 3, "dataset_id": 3, "movie_id": 12}
]);

//Test Queries for Data

//T1.1 Adding an incorrect review_id
db.REVIEWS.insertOne({"review_id": te, "description": "movie review 1 description", "date": "1/1/2022", "user_id": 1, "dataset_id": 1, "movie_id": 10}),

//T1.2 Adding an incorrect description
db.REVIEWS.insertOne({"review_id": 282, "description": movie review 1 description, "date": "1/1/2022", "user_id": 1, "dataset_id": 1, "movie_id": 10}),

//T1.3 Adding an incorrect date
db.REVIEWS.insertOne({"review_id": 282, "description": "movie review 1 description", "date": 1/1/2022, "user_id": 1, "dataset_id": 1, "movie_id": 10}),

//T1.4 Adding an incorrect user_id
db.REVIEWS.insertOne({"review_id": 282, "description": "movie review 1 description", "date": "1/1/2022", "user_id": te, "dataset_id": 1, "movie_id": 10}),

//T1.5 Adding an incorrect dataset_id
db.REVIEWS.insertOne({"review_id": 282, "description": "movie review 1 description", "date": "1/1/2022", "user_id": 1, "dataset_id": te, "movie_id": 10}),

//T1.6 Adding an incorrect movie_id
db.REVIEWS.insertOne({"review_id": 282, "description": "movie review 1 description", "date": "1/1/2022", "user_id": 1, "dataset_id": 1, "movie_id": te}),

//T2.1 Deleting one entry
db.REVIEWS.deleteOne({review_id: 282})

//T2.2 Deleting multiple entry
db.REVIEWS.deleteMany({category: "movie_id"})

//T3.1 Update one entry "review_id"
db.REVIEWS.updateOne({review_id: 282}, {$set:{review_id: 283}})

//T3.2 Update one entry "description"
db.REVIEWS.updateOne({review_id: 282}, {$set:{"description": "movie review 2 description"}})

//T3.3 Update one entry "date"
db.REVIEWS.updateOne({review_id: 282}, {$set:{"date": "1/1/2022"}})

//T3.4 Update one entry "user_id"
db.REVIEWS.updateOne({review_id: 282}, {$set:{"user_id": 2}})

//T3.5 Update one entry "dataset_id"
db.REVIEWS.updateOne({review_id: 282}, {$set:{"dataset_id": 2}})

//T3.6 Update one entry "movie_id"
db.REVIEWS.updateOne({review_id: 282}, {$set:{"movie_id": 11}})

//T3.7 Update maltiple entry
db.REVIEWS.updateMany({}, {$inc:{review_id:1}})

//T4 Insert data if can not be found on search
db.REVIEWS.updateOne(
  { review_id: 285 },
  {
    $set:
      {
        review_id: 285,
		description: "movie review 4 description",
		date: "1/1/2022",
		user_id: 4,
		dataset_id: 4,
		movie_id: 13
      }
  },
  { upsert: true }
)

//T5.1 Find all the review_id values
db.REVIEWS.find({}, { _id: 0, review_id: 1 })

//T5.2 Find all the description values
db.REVIEWS.find({}, { _id: 0, description: 1 })

//T5.3 Find all the date values
db.REVIEWS.find({}, { _id: 0, date: 1 })

//T5.4 Find all the user_id values
db.REVIEWS.find({}, { _id: 0, user_id: 1 })

//T5.5 Find all the dataset_id values
db.REVIEWS.find({}, { _id: 0, dataset_id: 1 })

//T5.6 Find all the movie_id values
db.REVIEWS.find({}, { _id: 0, movie_id: 1 })

